require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe LikesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Like. As you add validations to Like, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  let(:other_user) { create(:random_user) }
  let!(:other_user_post1) { create(:post, user_id: other_user.id) }
  let!(:other_user_post2) { create(:post, user_id: other_user.id) }
  let!(:like) { create(:like, user_id: user.id, post_id: other_user_post2.id) }

  context 'when user is logged in' do

    before do
      sign_in(user)
    end

    describe 'POST #create' do

      describe 'when user has not already liked a post' do
        it 'creates the new like' do
          expect{post :create, params: { like: { post_id: other_user_post1.id} }}.to change{Like.count}.by(1)
          expect(other_user_post1.likes.first.user_id).to eq user.id
          expect(response).to redirect_to(root_url)
        end
      end

      describe 'when user has already liked a post' do
        it 'does NOT create a new like' do
          post :create, params: { like: { post_id: other_user_post2.id} }

          expect{post :create, params: { like: { post_id: other_user_post2.id} }}.to change{Like.count}.by(0)
        end
      end

    end

    describe 'DELETE #destroy' do
      it 'deletes the like to unlike post' do
        expect { delete :destroy, params: { id: like.id } }.to change{Like.count}.by(-1)
        expect(response).to redirect_to(root_url)
      end
    end
  end

  context 'when user is not logged in' do

    describe 'POST #create' do
      it 'does not create like and redirects to login' do
          expect{post :create, params: { like: { post_id: other_user_post1.id} }}.to change{Like.count}.by(0)
          expect(response).to redirect_to(new_user_session_path)
      end
    end

    describe 'DELETE #destroy' do
      it 'does NOT delete the post and redirects to login' do
        expect { delete :destroy, params: { id: like.id } }.to change{Like.count}.by(0)
        expect(response).to redirect_to(new_user_session_path)
      end
    end

  end

end
